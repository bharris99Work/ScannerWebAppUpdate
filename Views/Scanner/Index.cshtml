<head>

    <style>
        .text-btn-container {
            display: grid;
            grid-template-columns: auto 50px; /* Adjust the width of the button container as needed */
            grid-template-rows: repeat(3, 1fr); /* Define two rows */
            gap: 10px; /* Space between the textarea and the button container */
            align-items: stretch; /* Make sure items stretch to the full height of the grid */
        }

        .btn-container {
            display: grid;
            grid-template-rows: repeat(3, 1fr); /* Create three equal rows */
            gap: 10px; /* Space between buttons */
        }

        .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%; /* Make buttons fill the height of their grid cells */
            margin: 0; /* Remove any margin */
            text-transform: none; /* Ensure text is not transformed */
            margin: 5px;
        }

        #resultText {
            grid-row: span 2; /* Make the textarea span two rows */
            height: 100%; /* Stretch to fill the two rows */
            box-sizing: border-box; /* Ensure padding and border are included in height */
            /* Flexbox properties for alignment */
            display: flex;
            justify-content: center; /* Center horizontally */
            align-items: center; /* Center vertically */
            resize: none; /* Prevent textarea resize */
            font-size: 30px;
        }

        .btn-scanning {
            display: flex;
            justify-content: center;
            flex-direction: row;
            flex-wrap: wrap;
            position: absolute;
            bottom: 20px; /* Adjust to place buttons at the bottom */
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
        }

        .hidden {
            display: none;
        }

        .modal-content {
            background-color: #f0f0f0; /* Set your desired background color */
            padding: 20px; /* Optional: Add padding to the modal content */
            max-height: calc(100vh - 120px); /* Adjust max-height based on your needs */
            overflow-y: auto; /* Enable vertical scrolling if content exceeds max-height */
        }

        .reader-container {
            flex: 1;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 100%;
        }

        #reader {
            width: 100%;
            height: 100%;
        }

       
    
    </style>

</head>


<!-- Scan Modal Trigger -->
@* <button data-target="ScanDialog" class="btn modal-trigger">Scan Item</button> *@

<!-- Scaan Modal Structure TODO: Add password function to dialog -->
<div id="ScanDialog" class="modal">
    <div class="modal-content">
        <!--QR Code Reader-->
        <div class="reader-container">
            <div id="reader"></div>
        </div>
        <div class="btn-scanning">
            @* <button class="btn-floating btn-small waves-effect blue darken-2" id="startScan"><i class="material-icons">play_arrow</i>Start Scan</button> *@
            @* <button class="btn-floating btn-small waves-effect blue darken-2" id="stopScan"><i class="material-icons">pause</i>Pause Scan</button> *@
            <button class="btn-floating btn-small waves-effect blue darken-2" id="switchCamera"><i class="material-icons">cameraswitch</i>Switch</button>
        </div>
    </div>
</div>

<body class="testbody">
    <!--Returns status of searched part-->
    <h3>@ViewBag.PartFound</h3>

    <h1>Scan For Part,</h1>

    <!--Allows User to manually select from a list of avalible camera devices-->
    <div class="row">
        <div class="row">
            @*  <div class="input-field col s3">
            <select class="browser-default" id="cameraSelect">
            </select>
            </div> *@
        </div>
    </div>


    <!--Form containing scanned part number-->
    <form asp-controller="Scanner" asp-action="ProcessScannedPart" method="post">

        <div class="text-btn-container">
            <div class="input-field">
                <!--Displays scanned part number-->
                <textarea id="resultText" readonly name="scannedPart" class="center-align">...Scan Part...</textarea>
            </div>

            <div class="btn-container">
                <!--Edit and Manually enter item number-->
                <a id="edit" class="btn-floating btn-small waves-effect blue darken-2"><i class="material-icons">create</i></a>
                <!--Shuffle and select an item at random from avalible parts (REMOVE DURING  PRODUCTION)-->
                <a id="shuffle" class="btn-floating btn-small waves-effect blue darken-2" asp-area="" asp-controller="Scanner" asp-action="LoadRandomPart"><i class="material-icons">shuffle</i></a>
                <!--Clear the item number that has been scanned or entered-->
                <a id="clear" class="btn-floating btn-small waves-effect"><i class="material-icons">clear</i></a>
            </div>
        </div>


        <div class="btn-scanning center-align">
            <!--Allows user to rescan-->
            <a class="waves-effect blue darken-2 btn" asp-area="" asp-controller="Scanner" asp-action=""><i class="material-icons left">qr_code_scanner</i>New Scan</a>
            <!--Searches for part in DB-->
            <button class="btn waves-effect blue darken-2" type="submit" name="action">
                Submit
                <i class="material-icons right">send</i>
            </button>
        </div>


    </form>

</body>

<!--Seeds DB with test parts (REMOVE DURING PRODUCTION)-->
@* <a class="hidden waves-effect blue darken-2 btn " asp-area="" asp-controller="Scanner" asp-action="BeginSeeding"><i class="material-icons left">qr_code_scanner</i>Seed DB</a> *@

<script src="~/js/materialize.min.js"></script>
<!-- Webpack bundle of scripts-->
<script src="~/dist/bundle.js" defer></script>
<script>

    document.addEventListener('DOMContentLoaded', function () {
        // var elems = document.querySelectorAll('.modal');
        // var instances = M.Modal.init(elems);

        let editBN = document.getElementById('edit');
        let shuffleBN = document.getElementById('shuffle');
        let clearBN = document.getElementById('clear');
        let resultText = document.getElementById('resultText');

        clearBN.addEventListener('click', function () {
            resultText.value = "";
        });

        editBN.addEventListener('click', function () {
            resultText.readOnly = !resultText.readOnly; // Toggle readonly attribute
            if (resultText.readOnly) {
                resultText.value = "Scan"; // Example text when readonly
            } else {
                resultText.value = ""; // Clear text when editable
            }
        });

    });
</script>



